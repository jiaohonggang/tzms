
文件上传：
	1.将文件上传到服务器，存储到服务器中的某个位置
	2.文件的名字，大小，位置，摘要信息（对文件内容进行加密（md5）生成的字符串）..存储数据库中
	
	123456--->md5--->39e960c145571f310fda7149d9c10498

	md5盐值加密	
	
	123456coco--->
	123456小冉
	
	123456+随机生成字符串（盐）--->39e960c145571f310fda7149d9c10498
	
	登录：coco 123456+盐--》 39e960c145571f310fda7149d9c10498
	
	
	1.添加上传文件依赖
	  <dependency>
     <groupId>commons-fileupload</groupId>
     <artifactId>commons-fileupload</artifactId>
     <version>1.4</version>
   </dependency>
   2.springmvc配置添加文件上传的解析器
      <!-- 配置文件上传的视图解析器 -->
    <bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
    </bean>
    3.设置文件上传表单：
    	发送post。设置form表单为enctype="muiltpart/form-data"
    
  1.表设计  
组织机构管理（部门管理），上下关系
菜单管理  ：上下关系
角色管理：用户分配一个角色
用户管理：   登录用户

2.关系

用户和角色：多对多
一个用户对应多个角色
一个角色对应多个用户

设计：关系表来关联两者的关系

用户表：
id	用户名   密码
 1	 小明   123
 2   小红   235
 3	 小黑  456	
角色表：
id  角色名
1 	学生
2	 班主任
3	 老师

中间表：
  id 用户id 角色id
  1		1	2
  2		1	3
  3		2	2
  4		3	2


 菜单表和角色表 ：  多对多
 	一个菜单对应多个角色
 	一个角色对应多个菜单
 中间表：
  id 菜单id 角色id
  1		1	2
  2		1	3
  3		2	2
  4		3	2   
  
  
    
组织表和用户表的关系：一对多，维护在多的一方
	一个部门下有多个用户
	
	组织表
	用户表：有个组织id
	
	
	权限管理：
		含义：只要有用户参与的系统 
			  用来实现对用户访问系统进行控制

	用户的认证：
		1.用户名和密码
		2.指纹机打卡
		3.面容id
		......
		系统要进行验证用户身份合法，用户才可以来访问系统的资源
	相关对象：
		用户：Subject（主体）	
		用户身份：principal（身份信息）
		密码：用户的凭证：credential(密码，指纹，面容)
		总结：
			主体在进行身份认证是需要提供身份信息和凭证信息。
		
	用户的授权（访问控制）
		用户在认证通过之后，系统要检查这个用户的访问资源是不是在当前用户的权限范围之内
		用户具有访问权限才可以进行访问。
		
		
	用户：Subject（主体）	在认证通过后对系统进行访问控制。；
	资源：resource ：subject必须要具备资源的访问权限才可以访问该资源
	（系统的用户列表页面，项目管理中项目的修改按钮，用户id为1的修改操作）

	资源的分类：
		资源类型：系统的用户信息	：java描述类
		资源实例：系统中用户id为1的用户：new 的java对象

	权限：permission（用户的添加，用户的修改，项目的删除...）
	Subject具有permission才可以访问资源
	
	用户需要分配相应的权限才可以访问相应的资源，相当于权限是对于资源的操作许可



	权限模型：
		主体表，资源表，权限表，角色表，角色和权限关系表，用户和角色关系表
	
	如何来进行权限控制（授权的核心）？
	1.基于角色的访问控制
	2.基于资源的访问控制
	
	角色：董事长，市场经理，项目经理
	1 coco --->董事长
    2 小美	-->董事长
    
    if(user.hasRole("董事长")){
    	//查询员工的所有数据
    	....
    }
    
    //需求：公司董事长可以查询所有员工的数据，公司融资了，融资方也可以查看员工的数据
  
   	3 小明 	融资方
   	
  	于是代码要进行修改
  	
    if(user.hasRole("董事长")||user.hasRole("融资方")){
    	//查询员工的所有数据
    	....
    }
    
   2.
    	if(user.isPermission("user:create")){
    		//查询所有用户信息....
    	}
    	
    	
    董事长--->查询的权限
  coco --->董事长
  
  
    
   融资方 --->查询的权限
   小红---->融资方
    
    
	1.粗颗粒度权限管理：是对资源类型进行权限管理（菜单，按钮，url,页面...）
		可以将代码抽取出来放到系统中统一处理，springmvc的拦截器
		
	2.细颗粒度权限管理：是对资源实例进行权限管理(用户为1的修改url，项目id为1的项目修改url)
    	业务层，service单独
    	所有用户只能访问本部门的员工信息
    	controller方法 可以得到当前登录用户，查询到他属于哪个部门
    	service方法（部门id）
    	dao ：查询那些用户属于该部门
    	
    权限框架
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    系统登录：
    	相当于给用户进行认证，如果用户认证成功了，就需要记住当前用户，session中
    	
    	用户登录页面--->用户名和密码-->点击登录--->对所输入的用户名和密码进行检验（service）
    	---->如果检验通过，在session中记录用户信息（controller）
    
    在service中定义根据前台返回的用户名和密码进行认证，如果认证通过，返回用户信息
    
    总结：根据用户名查询数据，如果查询不到用户，代表不存在，如果查询到了，
    就可以根据输入密码和数据库的密码进行对比，如果一致，则代表通过
    
    
    
    查询当前用户所能查看的对应菜单：
    	在用户认证通过后，根据用户id去数据库获取用户权限范围内的菜单，将菜单的集合存到session中
    	
    
    
    
    
   List<Map<String,Object>>
    
    id  name 
    1 	coco
    2 	xixi
   [ {id=1,name=coco}, {id=2,name=xixi}]
    
   
   
   
   
   
   shiro与项目进行整合：
   			需求：将现在所完成的项目使用shiro进行权限管理
   			1.取消sprigmvc的配置文件中 拦截器的配置
   			
   			2.需要对请求进行过滤
   
   			在web.xml中先配置过滤器，对请求进行过滤，拦截之后把操作权交给spring中配置的filterChain
   
   
   
   原理：当用户没认证时，请求loginUI进行认证，只要提交到认证的地址，用户身份和用户密码进行提交
   
   
   
   
   授权：
   	1.在shiro配置文件中配置过滤器 规则/menu/listUI = perms[sys:menu:view]
   	2.用户在认证通过之后，请求/menu/listUI
   	3.被web.xml过滤器拦截，发现需要sys:menu:view这个权限
   	4.perms过滤器调用realm中doGetAuthorizationInfo获取当前用户在数据库中对应的权限
   	5.获取之后，过滤器对请求的url/menu/listUI所需要的权限sys:menu:view，和realm获取到
   
   1.	用户权限进行比较，如果有，则授权成功，
   如果使用以上这种方式，需要将项目中的全部url和权限配置到shiro配置文件中，这种方式很麻烦，
   不方便使用
   
   2.每次授权都需要调用realm进行查询数据库，对系统性能影响较大，
   
   需求：修改自定义realm，从数据库中查询用户信息，并且返回的用户信息需要数据库中保存的密码进行比对
   实现shiro进行加密的校验
   
   注解式和jsp标签授权式
   当调用controller的一个方法，这个方法如果加上@RequiresPermissions("sys:menu:update")
   shiro会调用realm从数据库中查询权限信息，看sys:menu:update是否在权限数据中，如果存在，
   则授权通过，而如果不存在，则无权访问
   
   在显示一个jsp页面时，页面如果遇到shiro标签，也会去调用realm去获取数据库中的权限信息，
   同样sys:menu:add是否在权限数据中，如果存在，
   则授权通过，而如果不存在，则对应按钮不显示
   
   授权缓存：
   	第一次进行授权：
   		调用realm查询数据
   	第二次进行授权：
   		不再realm中查询数据，而是直接从缓存中拿数据
    
    
	